name: Workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: ["**"]
  workflow_dispatch:
    inputs:
      bump_level:
        description: "The part of the version to bump (patch, minor, or major)"
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version-file: ".python-version"
          cache: "poetry"

      - name: Check lock file consistency
        run: poetry check --lock

      - name: Install dependencies
        run: poetry sync

      - name: Run all checks
        run: make check

  release:
    needs: [check]
    runs-on: ubuntu-latest
    # This job runs only when manually triggered via workflow_dispatch
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        # We need to check out the code with full history to allow version bumping
        # and pushing back to the repository.
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version-file: ".python-version"
          cache: "poetry"

      - name: Install dependencies
        run: poetry sync

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version and get new version tag
        id: bump_version
        run: |
          # Bump the version using poetry
          poetry version ${{ github.event.inputs.bump_level }}
          # Get the new version
          NEW_VERSION=$(poetry version --short)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and push version bump
        run: |
          git add pyproject.toml poetry.lock
          git commit -m "build: bump version to ${{ steps.bump_version.outputs.new_version }}"
          git push

      - name: Create Git tag and push
        run: |
          git tag ${{ steps.bump_version.outputs.new_tag }}
          git push origin ${{ steps.bump_version.outputs.new_tag }}

      - name: Generate config schema
        run: |
          poetry run feedly-entries-processor show-config-schema > config_schema.json

      - name: Create GitHub Release
        env:
          # This token is provided by Actions, and has read/write permissions for the repo
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.bump_version.outputs.new_tag }} \
            --generate-notes \
            --title "${{ steps.bump_version.outputs.new_tag }}" \
            --asset config_schema.json
